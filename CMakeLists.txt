CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)
 
PROJECT("HelloQt")

SET(CMAKE_INCLUDE_CURRENT_DIR ON)
SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

SET( PROJECT_VERSION_MINOR "0" )
SET( PROJECT_VERSION_MAJOR "0" )
SET( PROJECT_VERSION_PATCH "0" )
SET( PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}" )

MESSAGE( "CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR}" )
MESSAGE( "CMAKE_ROOT=${CMAKE_ROOT}" )
MESSAGE( "CMAKE_SYSTEM=${CMAKE_SYSTEM}" )
 
SET(CMAKE_AUTOMOC ON)
FIND_PACKAGE(Qt5Widgets REQUIRED)

 
SET(SRCS main.cpp mainwindow.cpp)
SET( MAIN_EXECUTABLE hello )

qt5_wrap_ui(UI_HEADERS mainwindow.ui)
qt5_add_resources(RESOURCES resources.qrc)
message(STATUS "UI_HEADERS=${UI_HEADERS}")
message(STATUS "MOC_HEADERS=${MOC_HEADERS}")
message(STATUS "RESOURCES=${RESOURCES}")
 
ADD_EXECUTABLE("${MAIN_EXECUTABLE}" ${SRCS} ${UI_HEADERS} ${MOC_HEADERS} ${RESOURCES})
TARGET_LINK_LIBRARIES(${MAIN_EXECUTABLE} Qt5::Widgets)
INSTALL(TARGETS ${MAIN_EXECUTABLE} DESTINATION bin)

SET (SVG_ICON_FILE "${CMAKE_SOURCE_DIR}/icon.svg")

SET( CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}" )
IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  MESSAGE(STATUS "Running Mac packaging"
  INCLUDE("mac/packaging.cmake")
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  MESSAGE(STATUS "Running Linux packaging"
  INCLUDE("ubuntu/packaging.cmake")
ENDIF()

INCLUDE( CPack )
